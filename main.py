import smtplib
import re
import functools
import random
import sqlite3
import urllib

import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove

from settings import TOKEN, ADMIN_ID
from email_config import send_contact_email
from questions_answers import answers, questions, animal_responses, animals_photos
from logger import logger, log_errors, log_performance
from buttons import (quiz_button, guardian_button, contact_button, feedback_button,
                     menu_button, yes_button, search_more_button, quiz_inquiry_button)
from dbutils.pooled_db import PooledDB

bot = telebot.TeleBot(TOKEN)

db_pool = PooledDB(sqlite3, maxconnections=10, database='quiz_results.db')


@log_errors
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(quiz_button, guardian_button, contact_button, feedback_button)
    file_path = 'logo/Mzoo-logo-01.webp'
    with open(file_path, 'rb') as logo:
        bot.send_photo(message.chat.id, logo, '–ú—è—É—É –ü—Ä—Ä—Ä–∏–≤–µ—Ç, ' + str(message.from_user.first_name) + '!'
                                              '\n–Ø –∫–æ—Ç-–±–æ—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ó–æ–æ–ø–∞—Ä–∫–∞!'
                                              '\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!',
                       reply_markup=markup)


@log_errors
@bot.callback_query_handler(func=lambda call: call.data in ['quiz', 'become-a-guardian', 'contact', 'feedback'])
def callback_query1(call):
    if call.data == 'quiz':
        start_quiz(call.message)

    elif call.data == 'become-a-guardian':
        with open('become-a-guardian.txt', 'r', encoding='utf-8') as file:
            program_text = file.read()
            bot.send_message(call.message.chat.id, program_text, parse_mode='HTML')

            message_text = ("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ <a href='https://moscowzoo.ru/my-zoo/become-a-guardian/'>"
                            "¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª</a>")
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(menu_button)
            bot.send_message(call.message.chat.id, message_text, reply_markup=markup, parse_mode='HTML')

    elif call.data == 'contact':
        handle_contact(call.message)

    elif call.data == 'feedback':
        handle_feedback_query(call.message)


@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    file_path = 'logo/quiz_logo-01.webp'
    with open(file_path, 'rb') as logo:
        bot.send_photo(message.chat.id, logo)
    bot.send_message(message.chat.id, '–ú—è—É—É! –£–∑–Ω–∞–µ–º, –∫—Ç–æ —Ç–≤–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å!\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:')
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)

    for answer in answers[0]:
        markup.add(types.KeyboardButton(answer))
    bot.send_message(message.chat.id, questions[0], reply_markup=markup)
    bot.register_next_step_handler(message, functools.partial(handle_quiz_process, user_answers=[]))


@log_errors
def validate_answer(message, user_answers):
    if message.text not in answers[len(user_answers)]:
        logger.error('Invalid answer from user: %s', message.text)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, 'üê∑–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.')
        return False
    return True


def send_question(message, user_answers):
    current_question = len(user_answers)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for answer in answers[current_question]:
        markup.add(types.KeyboardButton(answer))
    bot.send_message(message.chat.id, questions[current_question], reply_markup=markup)
    bot.register_next_step_handler(message, functools.partial(handle_quiz_process, user_answers=user_answers))


def calculate_scores(user_answers):
    animal_scores = {"–ö—Ä—è–∫–≤–∞": 0, "–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –∫–æ–±—Ä–∞": 0, "–ö–∞–º—ã—à–æ–≤—ã–π –∫–æ—Ç": 0}
    for i, user_answer in enumerate(user_answers):
        animal = animal_responses[i][answers[i].index(user_answer)]
        animal_scores[animal] += 1
    return animal_scores


def store_quiz_result(result_animal):
    conn = db_pool.connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("INSERT INTO quiz_results (result_animal) VALUES (?)", (result_animal,))
            conn.commit()
    finally:
        conn.close()


def generate_whatsapp_share_text(result_animal):
    share_text = f"https://t.me/AnimalQuizBot –°–º–æ—Ç—Ä–∏, –º–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {result_animal}!"
    share_link = f"https://wa.me/?text={urllib.parse.quote(share_text)}"
    return share_link


@log_errors
def handle_quiz_process(message, user_answers):
    if not validate_answer(message, user_answers):
        send_question(message, user_answers)
        return

    user_answers.append(message.text)
    current_question = len(user_answers)

    if current_question < len(questions):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for answer in answers[current_question]:
            markup.add(types.KeyboardButton(answer))
        bot.send_message(message.chat.id, questions[current_question], reply_markup=markup)
        bot.register_next_step_handler(message, functools.partial(handle_quiz_process, user_answers=user_answers))

    else:
        animal_scores = calculate_scores(user_answers)
        max_score = max(animal_scores.values())
        top_animals = [animal for animal, score in animal_scores.items() if score == max_score]
        result_animal = random.choice(top_animals)

        store_quiz_result(result_animal)

        photo_path = 'photos/' + animals_photos[result_animal]
        with open(photo_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)

        result_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {result_animal}!"
        bot.send_message(message.chat.id, result_message)

        share_text = '–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —Å –¥—Ä—É–∑—å—è–º–∏!'
        switch_query = f'\n–ú–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å - —ç—Ç–æ {result_animal}'
        whatsapp_share_link = generate_whatsapp_share_text(result_animal)
        markup = types.InlineKeyboardMarkup(row_width=2)
        telegram_share_button = types.InlineKeyboardButton('–í –¢–µ–ª–µ–≥—Ä–∞–º–º!',
                                                           switch_inline_query=switch_query)
        whatsapp_share_button = types.InlineKeyboardButton('–í WhatsApp!', url=whatsapp_share_link)
        markup.add(telegram_share_button, whatsapp_share_button, quiz_inquiry_button)
        bot.send_message(message.chat.id, share_text, reply_markup=markup)

        markup = types.ReplyKeyboardMarkup(row_width=2)
        markup.add(yes_button, search_more_button)
        bot.send_message(message.chat.id, f"–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º —Ç–≤–æ–µ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è {result_animal}?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, program_info)


@log_errors
def program_info(message):
    if message.text == '–î–∞':
        message_text = ("–£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ <a href='https://moscowzoo.ru/my-zoo/become-a-guardian/'>"
                        "¬´–í–æ–∑—å–º–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –ø–æ–¥ –æ–ø–µ–∫—É¬ª</a>")
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(menu_button)
        bot.send_message(message.chat.id, message_text, reply_markup=markup, parse_mode='HTML')
    elif message.text == '–ù–µ—Ç, –∏—Å–∫–∞—Ç—å –µ—â–µ!':
        start_quiz(message)


@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def return_to_menu(call):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(quiz_button, guardian_button, contact_button, feedback_button)
    file_path = 'logo/Mzoo-logo-01.webp'
    with open(file_path, 'rb') as logo:
        bot.send_photo(call.message.chat.id, logo, '–ú—è—É—É! –ù—É —á—Ç–æ, —Å—ã–≥—Ä–∞–µ–º?', reply_markup=markup)


@bot.message_handler(commands=['contact'])
def handle_contact(message):
    contact_zoo(message)


@bot.callback_query_handler(func=lambda call: call.data == 'quiz_inquiry')
def handle_inquiry_callback(call):
    contact_zoo(call.message)


def contact_zoo(message):
    bot.send_message(message.chat.id, '–ú—è—É—É, –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ')
    bot.register_next_step_handler(message, get_user_email)


@log_errors
def get_user_email(message):
    user_email = message.text

    if not re.match(r'[^@]+@[^@]+\.[^@]+', user_email):
        bot.send_message(message.chat.id, '–ú—è—É—É, —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã –º—ã, üê± –∫–æ—Ç—ã üê±, –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º \n'
                                          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, username@yandex.ru): ')
        bot.register_next_step_handler(message, get_user_email)
        return
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: ', reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, functools.partial(handle_contact_inquiry, user_email=user_email))


@log_errors
@log_performance
def handle_contact_inquiry(message, user_email):
    user_message = message

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–∑ –î–ë
    conn = sqlite3.connect('quiz_results.db')
    c = conn.cursor()
    c.execute("SELECT result_animal FROM quiz_results ORDER BY id DESC LIMIT 1")
    result_row = c.fetchone()
    if result_row:
        result_animal = result_row[0]
    else:
        result_animal = "–ï—â–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

    try:
        send_contact_email(user_message, user_email, result_animal)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(menu_button)
        bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)

        c.execute('DELETE FROM quiz_results')
        conn.commit()
        conn.close()

    except smtplib.SMTPSenderRefused as ex:
        logger.error(f'SMTP sender refused error: {ex}')
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}. '
                                          f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã.')
        bot.register_next_step_handler(message, get_user_email)

    except sqlite3.Error as ex:
        logger.error(f'SQLite error: {ex}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    except Exception as ex:
        logger.error(f'An error occurred in handle_contact_inquiry: {ex}')
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@bot.message_handler(commands=['feedback'])
def handle_feedback_query(message):
    bot.send_message(message.chat.id, '–ú—è—É—É!\n–ü–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤–Ω–∏–∑—É', reply_markup=feedback_button)
    bot.register_next_step_handler(message, handle_feedback_message)


@log_errors
@log_performance
def handle_feedback_message(message):
    feedback = message.text
    logger.info(f'–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username} id: {message.from_user.id} : {feedback}')
    bot.send_message(ADMIN_ID, f'–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {message.from_user.id}:\n{feedback}')

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(menu_button)
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', reply_markup=markup)


available_commands = [
    "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º",
    "/quiz - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
    "/contact - –ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∑–æ–æ–ø–∞—Ä–∫–∞",
    "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ"
]


@bot.message_handler(func=lambda message: message.text.startswith("/") and not any(
    message.text.split()[0].split("@")[0][1:] in command for command in available_commands))
def wrong_command(message):
    bot.send_message(message.chat.id, "üôà –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:"
                                      "\n\n" + "\n".join(available_commands))


@bot.message_handler(content_types=['document', 'photo', 'video', 'video_note', 'sticker', 'voice'],
                     func=lambda message: True)
def answer_on_media(message):
    bot.send_message(message.chat.id, '–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')


if __name__ == '__main__':
    bot.polling(non_stop=True)
